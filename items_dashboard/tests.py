# Generated by CodiumAI
from django.test import RequestFactory
from items_dashboard.views import get_items
from items_dashboard.models import Item


import pytest

pytestmark = pytest.mark.django_db


def admin_client(client, admin_user):
    client.force_login(admin_user)
    return client


# Returns a list of all items when no query parameters are provided
def test_returns_all_items_when_no_query_parameters(admin_client):
    request = admin_client.get("/items/")

    assert request.status_code == 200
    assert len(request.data) == Item.objects.count()


# Filters items by name when 'name' query parameter is provided
def test_filters_items_by_name_when_name_query_parameter_provided(admin_client):
    name = "item1"
    response = admin_client.get("/items/", {"name": name})

    assert response.status_code == 200
    assert all(item["name"].lower().find(name.lower()) != -1 for item in response.data)


# Filters items by SKU when 'SKU' query parameter is provided
def test_filters_items_by_SKU_when_SKU_query_parameter_provided(admin_client):
    SKU = "12345"
    response = admin_client.get("/items/", {"SKU": SKU})

    assert response.status_code == 200
    assert all(item["SKU"].lower().find(SKU.lower()) != -1 for item in response.data)


# Returns empty list when no items match query parameters
def test_returns_empty_list_when_no_items_match_query_parameters(admin_client):
    name = "item3_not_in_database"
    response = admin_client.get("/items/", {"name": name})

    assert response.status_code == 200
    assert len(response.data) == 0


# Filters items case insensitively when 'name' query parameter is provided
def test_filters_items_case_insensitively_when_name_query_parameter_provided(
    admin_client,
):
    name = "ITEM1"
    response = admin_client.get("/items/", {"name": name})

    assert response.status_code == 200
    assert all(item["name"].lower().find(name.lower()) != -1 for item in response.data)


# Filters items case insensitively when 'category' query parameter is provided
def test_filters_items_case_insensitively_when_category_query_parameter_provided(
    admin_client,
):
    category = "CATEGORY1"
    response = admin_client.get("/items/", {"category": category})

    assert response.status_code == 200
    assert all(
        item["category"].lower().find(category.lower()) != -1 for item in response.data
    )


def test_returns_403_unauthorized_when_user_not_authenticated():
    request = RequestFactory().get("/items/")

    response = get_items(request)

    assert response.status_code == 403


def test_filters_items_by_stock_status_when_stock_status_query_parameter_provided(
    admin_client,
):
    stock_status = "In Stock"
    response = admin_client.get("/items/", {"stock_status": stock_status})

    assert response.status_code == 200
    assert all(
        item["stock_status"].lower().find(stock_status.lower()) != -1
        for item in response.data
    )


def test_filters_items_by_tags_when_tags_query_parameter_provided(admin_client):
    # Arrange
    tags = ["tag1", "tag2"]
    response = admin_client.get("/items/", {"tags": tags})

    # Assert
    assert response.status_code == 200
    assert all(
        any(tag.lower() in item["tags"] for tag in tags) for item in response.data
    )
